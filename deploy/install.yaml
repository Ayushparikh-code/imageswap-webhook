apiVersion: v1
kind: Namespace
metadata:
  name: imageswap-system
  labels:
    app: imageswap
    resource: namespace
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: imageswap-write
  labels:
    app: imageswap
    resource: clulsterrole
rules:
- apiGroups:
  - admissionregistration.k8s.io
  - certificates.k8s.io
  - ""
  resources:
    - mutatingwebhookconfigurations
    - certificatesigningrequests
    - certificatesigningrequests/approval
    - certificatesigningrequests/status
    - signers
  verbs:
    - get
    - list
    - watch
    - create
    - patch
    - update
    - delete
    - approve

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: imageswap-write-crb
  labels:
    app: imageswap
    resource: clusterrolebinding
roleRef:
  kind: ClusterRole
  name: imageswap-write
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: imageswap-sa
  namespace: imageswap-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: imageswap-sa
  namespace: imageswap-system
  labels:
    app: imageswap
    resource: serviceaccount
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: imageswap-env
  namespace: imageswap-system
  labels:
    app: imageswap
    resource: configmap
data:
  FLASK_ENV: "production"
  PYTHONUNBUFFERED: "TRUE"
  IMAGESWAP_LOG_LEVEL: "INFO"
  IMAGE_PREFIX: "jmsearcy"

---
apiVersion: v1
data:
  imageswap-mwc: |
    apiVersion: admissionregistration.k8s.io/v1beta1
    kind: MutatingWebhookConfiguration
    metadata:
      name: imageswap-webhook
      labels:
        app: imageswap
        resource: mutatingwebhookconfiguration
    webhooks:
      - name: imageswap-webhook.k8s.twr.io
        clientConfig:
          service:
            name: imageswap
            namespace: imageswap-system
            path: "/"
          caBundle: $CA_BUNDLE
        rules:
          - operations:
              - CREATE
              - UPDATE
            apiGroups:
              - "apps"
            apiVersions:
              - "*"
            resources:
              - "deployments"
              - "statefulsets"
              - "daemonsets"
        failurePolicy: Fail
        namespaceSelector:
          matchLabels:
            k8s.twr.io/imageswap: "enabled"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: imageswap-mwc-template
  namespace: imageswap-system

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: imageswap-webhook
    resource: service
  name: imageswap
  namespace: default
spec:
  ports:
  - name: https
    port: 443
    targetPort: 5000
  selector:
    app: imageswap
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: imageswap-pdb
  namespace: imageswap-system
  labels:
    app: imageswap
    resource: poddisruptionbudget
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: imageswap
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: imageswap
  labels:
    app: imageswap
    resource: deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: imageswap
  template:
    metadata:
      labels:
        app: imageswap
    spec:
      initContainers:
        - name: imageswap-init
          image: jmsearcy/imageswap-init:v0.0.1
          command: [/app/imageswap-init.py]
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
          env:
          - name: IMAGESWAP_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: IMAGESWAP_NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          envFrom:
            - configMapRef:
                name: imageswap-env
          volumeMounts:
          - name: imageswap-tls
            mountPath: /tls
          - name: imageswap-mwc
            mountPath: /mwc
      containers:
      - name: imageswap
        image: jmsearcy/imageswap:v1.2.0
        ports:
        - containerPort: 5000
        command: ["gunicorn", "imageswap:app", "--config=config.py"]
        imagePullPolicy: Always
        securityContext:
            allowPrivilegeEscalation: false
        resources:
          limits:
            cpu: "500m"
            memory: 512Mi
          requests:
            cpu: 50m
            memory: 128Mi
        env:
          - name: IMAGESWAP_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: IMAGESWAP_NAMESPACE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        envFrom:
            - configMapRef:
                name: imageswap-env
        volumeMounts:
          - name: certs
            mountPath: /app/ssl
            readOnly: true
      volumes:
        - name: certs
          secret:
            secretName: imageswap-certs
---

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: imageswap
    resource: horizontalpodautoscaler
  name: imageswap
  namespace: imageswap-system
spec:
  maxReplicas: 6
  minReplicas: 2
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: imageswap
  targetCPUUtilizationPercentage: 80
